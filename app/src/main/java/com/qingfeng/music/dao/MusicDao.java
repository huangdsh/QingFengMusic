package com.qingfeng.music.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MUSIC".
*/
public class MusicDao extends AbstractDao<Music, Long> {

    public static final String TABLENAME = "MUSIC";

    /**
     * Properties of entity Music.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Album = new Property(2, String.class, "album", false, "ALBUM");
        public final static Property AlbumId = new Property(3, Long.class, "albumId", false, "ALBUM_ID");
        public final static Property Artist = new Property(4, String.class, "artist", false, "ARTIST");
        public final static Property Path = new Property(5, String.class, "path", false, "PATH");
        public final static Property DisplayName = new Property(6, String.class, "displayName", false, "DISPLAY_NAME");
        public final static Property Duration = new Property(7, Integer.class, "duration", false, "DURATION");
        public final static Property Size = new Property(8, Integer.class, "size", false, "SIZE");
        public final static Property Collect = new Property(9, Integer.class, "collect", false, "COLLECT");
        public final static Property LrcId = new Property(10, Long.class, "lrcId", false, "LRC_ID");
        public final static Property LrcUrl = new Property(11, String.class, "lrcUrl", false, "LRC_URL");
        public final static Property ImageUrl = new Property(12, String.class, "imageUrl", false, "IMAGE_URL");
        public final static Property Encode = new Property(13, String.class, "encode", false, "ENCODE");
        public final static Property Decode = new Property(14, String.class, "decode", false, "DECODE");
    }


    public MusicDao(DaoConfig config) {
        super(config);
    }
    
    public MusicDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MUSIC\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TITLE\" TEXT," + // 1: title
                "\"ALBUM\" TEXT," + // 2: album
                "\"ALBUM_ID\" INTEGER," + // 3: albumId
                "\"ARTIST\" TEXT," + // 4: artist
                "\"PATH\" TEXT," + // 5: path
                "\"DISPLAY_NAME\" TEXT," + // 6: displayName
                "\"DURATION\" INTEGER," + // 7: duration
                "\"SIZE\" INTEGER," + // 8: size
                "\"COLLECT\" INTEGER," + // 9: collect
                "\"LRC_ID\" INTEGER," + // 10: lrcId
                "\"LRC_URL\" TEXT," + // 11: lrcUrl
                "\"IMAGE_URL\" TEXT," + // 12: imageUrl
                "\"ENCODE\" TEXT," + // 13: encode
                "\"DECODE\" TEXT);"); // 14: decode
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MUSIC\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Music entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String album = entity.getAlbum();
        if (album != null) {
            stmt.bindString(3, album);
        }
 
        Long albumId = entity.getAlbumId();
        if (albumId != null) {
            stmt.bindLong(4, albumId);
        }
 
        String artist = entity.getArtist();
        if (artist != null) {
            stmt.bindString(5, artist);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(6, path);
        }
 
        String displayName = entity.getDisplayName();
        if (displayName != null) {
            stmt.bindString(7, displayName);
        }
 
        Integer duration = entity.getDuration();
        if (duration != null) {
            stmt.bindLong(8, duration);
        }
 
        Integer size = entity.getSize();
        if (size != null) {
            stmt.bindLong(9, size);
        }
 
        Integer collect = entity.getCollect();
        if (collect != null) {
            stmt.bindLong(10, collect);
        }
 
        Long lrcId = entity.getLrcId();
        if (lrcId != null) {
            stmt.bindLong(11, lrcId);
        }
 
        String lrcUrl = entity.getLrcUrl();
        if (lrcUrl != null) {
            stmt.bindString(12, lrcUrl);
        }
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(13, imageUrl);
        }
 
        String encode = entity.getEncode();
        if (encode != null) {
            stmt.bindString(14, encode);
        }
 
        String decode = entity.getDecode();
        if (decode != null) {
            stmt.bindString(15, decode);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Music entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String album = entity.getAlbum();
        if (album != null) {
            stmt.bindString(3, album);
        }
 
        Long albumId = entity.getAlbumId();
        if (albumId != null) {
            stmt.bindLong(4, albumId);
        }
 
        String artist = entity.getArtist();
        if (artist != null) {
            stmt.bindString(5, artist);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(6, path);
        }
 
        String displayName = entity.getDisplayName();
        if (displayName != null) {
            stmt.bindString(7, displayName);
        }
 
        Integer duration = entity.getDuration();
        if (duration != null) {
            stmt.bindLong(8, duration);
        }
 
        Integer size = entity.getSize();
        if (size != null) {
            stmt.bindLong(9, size);
        }
 
        Integer collect = entity.getCollect();
        if (collect != null) {
            stmt.bindLong(10, collect);
        }
 
        Long lrcId = entity.getLrcId();
        if (lrcId != null) {
            stmt.bindLong(11, lrcId);
        }
 
        String lrcUrl = entity.getLrcUrl();
        if (lrcUrl != null) {
            stmt.bindString(12, lrcUrl);
        }
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(13, imageUrl);
        }
 
        String encode = entity.getEncode();
        if (encode != null) {
            stmt.bindString(14, encode);
        }
 
        String decode = entity.getDecode();
        if (decode != null) {
            stmt.bindString(15, decode);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Music readEntity(Cursor cursor, int offset) {
        Music entity = new Music( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // album
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // albumId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // artist
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // path
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // displayName
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // duration
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // size
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // collect
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10), // lrcId
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // lrcUrl
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // imageUrl
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // encode
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // decode
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Music entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAlbum(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAlbumId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setArtist(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPath(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDisplayName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDuration(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setSize(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setCollect(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setLrcId(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
        entity.setLrcUrl(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setImageUrl(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setEncode(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setDecode(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Music entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Music entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Music entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
